services:
  postgres:
    image: postgres:16
    command:
      - postgres
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - pg_stat_statements.max=10000
      - -c
      - pg_stat_statements.track=top
      - -c
      - pg_stat_statements.save=on
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4:8
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:80/misc/ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api:
    build: .
    restart: unless-stopped
    # Use both: the project-wide .env AND a container-only override file
    env_file:
      - .env
      - .env.docker
    environment:
      # Ensure Alembic points to the right file inside the container
      ALEMBIC_CONFIG: /app/alembic.ini
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:8000/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
