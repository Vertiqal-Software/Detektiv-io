name: Tests

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    # ADD-ONLY: make every `run:` execute from the repo root (where alembic.ini is)
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    services:
      postgres:
        image: postgres:16
        env:
          # Always set user/db
          POSTGRES_USER: postgres
          POSTGRES_DB: detecktiv

          # Use password when we have access to secrets (push to main),
          # but fall back to trust auth for PRs from forks/bots.
          POSTGRES_PASSWORD: ${{ github.event_name != 'pull_request' && secrets.CI_DB_PASSWORD || '' }}
          POSTGRES_HOST_AUTH_METHOD: ${{ github.event_name == 'pull_request' && 'trust' || '' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -h 127.0.0.1 -p 5432 -U postgres -d detecktiv"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    env:
      POSTGRES_USER: postgres
      POSTGRES_DB: detecktiv
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: "5432"

      # Match the service logic: password for pushes, empty for PRs (trust).
      POSTGRES_PASSWORD: ${{ github.event_name != 'pull_request' && secrets.CI_DB_PASSWORD || '' }} # pragma: allowlist secret

      # ADD-ONLY: tell Alembic exactly where the config is (used by python -m alembic if needed)
      ALEMBIC_CONFIG: ${{ github.workspace }}/alembic.ini

      # ADD-ONLY: actually run the DB test in CI (local stays opt-in)
      RUN_DB_TESTS: "1"

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt          # <-- ADD
          pip install -r requirements-dev.txt

      # --- ensure psql client is present for connectivity checks (keep) ---
      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB" && break
            sleep 1
          done

      # --- extra wait using real psql login (handles auth readiness) (keep) ---
      - name: Extra wait (psql ping)
        env:
          # Use secret on pushes; empty on PRs (trust mode)
          PGPASSWORD: ${{ github.event_name != 'pull_request' && secrets.CI_DB_PASSWORD || '' }} # pragma: allowlist secret
        run: |
          echo "Pinging DB with psql until it accepts auth..."
          for i in {1..40}; do
            psql "host=127.0.0.1 port=5432 dbname=$POSTGRES_DB user=$POSTGRES_USER sslmode=disable" -c "select 1" && break
            sleep 2
          done

      # --------- ADDED (only) START ----------
      - name: Sanity: confirm alembic.ini
        run: |
          echo "CWD: $(pwd)"
          ls -la
          echo "Searching for alembic.ini..."
          find . -maxdepth 3 -name alembic.ini -print
          test -f ./alembic.ini && echo "alembic.ini present in repo root" || (echo "alembic.ini NOT found in repo root!" && exit 1)

      - name: Debug env & client versions
        run: |
          echo "POSTGRES_USER=$POSTGRES_USER"
          echo "POSTGRES_DB=$POSTGRES_DB"
          echo "POSTGRES_HOST=$POSTGRES_HOST"
          echo "POSTGRES_PORT=$POSTGRES_PORT"
          echo "ALEMBIC_CONFIG=$ALEMBIC_CONFIG"
          psql --version || true
          python --version

      - name: Show script_location from alembic.ini
        run: |
          echo "Top of alembic.ini:"
          head -n 60 ./alembic.ini || true
          echo "Parsed script_location via Alembic Config:"
          python - <<'PY'
          import os
          from alembic.config import Config
          cfg = Config("./alembic.ini")
          print("script_location:", cfg.get_main_option("script_location"))
          PY

      - name: Sanity: Python DB connect
        run: |
          python - <<'PY'
          import os
          from sqlalchemy import create_engine, text
          u = os.getenv("POSTGRES_USER","postgres")
          p = os.getenv("POSTGRES_PASSWORD","")
          h = os.getenv("POSTGRES_HOST","127.0.0.1")
          port = os.getenv("POSTGRES_PORT","5432")
          db = os.getenv("POSTGRES_DB","detecktiv")
          url = f"postgresql+psycopg2://{u}:{p}@{h}:{port}/{db}?sslmode=disable"
          safe = url.replace(p, "***") if p else url
          print("SQLAlchemy URL:", safe)
          eng = create_engine(url, future=True)
          with eng.connect() as c:
              print("select 1 ->", c.execute(text("select 1")).scalar_one())
          PY

      - name: Show Alembic status (non-fatal)
        run: |
          alembic -c ./alembic.ini current || true
      # --------- ADDED (only) END ----------

      - name: Apply migrations
        run: |
          # Hard-code the config path so Alembic *always* loads the right file.
          alembic -c ./alembic.ini upgrade head

      - name: Run tests
        run: |
          pytest -q
