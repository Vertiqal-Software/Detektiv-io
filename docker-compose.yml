services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    command:
      - postgres
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - pg_stat_statements.max=10000
      - -c
      - pg_stat_statements.track=top
      - -c
      - pg_stat_statements.save=on
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-detecktiv}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-detecktiv} -h 127.0.0.1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  api:
    image: ${API_IMAGE:-detecktiv/api}:${API_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Alembic/import-path hardening
      PYTHONPATH: /app
      ALEMBIC_CONFIG: /app/alembic.ini
      RUN_MIGRATIONS_ON_BOOT: ${RUN_MIGRATIONS_ON_BOOT:-1}
      MIGRATION_TARGET: ${MIGRATION_TARGET:-head}

      # Runtime
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # API server
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      API_WORKERS: ${API_WORKERS:-1}

      # CORS / Frontend
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      CORS_ALLOW_ALL: ${CORS_ALLOW_ALL:-false}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,http://localhost:8000}

      # Database
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-detecktiv}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-detecktiv}?sslmode=disable}

      # 3rd party
      CH_API_KEY: ${CH_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || curl -fsS http://localhost:8000/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 20s

  frontend:
    image: node:20-alpine
    working_dir: /app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:${API_PORT:-8000}}
      CHOKIDAR_USEPOLLING: "1"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    command: >-
      sh -lc "corepack enable || true; if [ -f package-lock.json ]; then npm ci; else npm install; fi; npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      api:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5173 || curl -fsS http://localhost:5173 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4:8.12
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-supersecret123!}
      PGADMIN_LISTEN_PORT: "80"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: ${PGADMIN_LOG_LEVEL:-40}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost/misc/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

volumes:
  postgres_data:
  pgadmin_data:
  frontend_node_modules:
